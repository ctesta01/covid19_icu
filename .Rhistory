P2 = initial_report*medium,
MS2 = 0,
WC2= 0,
C2 = 0,
WF2 = 0,
F2= 0,
R2=0,
D2 =0,
# initial conditions old
I3 =0,
P3= initial_report*old,
MS3 = 0,
WC3= 0,
C3 = 0,
WF3= 0,
F3 = 0,
R3 =0,
D3 =0,
Dead_at_ICU =0,
Dead_on_Floor =0,
Dead_waiting_for_ICU =0,
Dead_waiting_for_Floor=0,
Dead_with_mild_symptoms=0,
Dead_in_ED=0,
Number_seen_at_ED=0,
FTotal=0,
CTotal=0
)
############## RUN MODEL
reports <- approxfun(report_rate(initial_report = initial_report, final_report = final_report, distribution=distribution), rule=2)
model_strat <- function (t, x , pars,...) {
# initial conditions young ###CHANGE YOUND PARAMS ######
I1<- x[1];
P1 <- x[2];
MS1 <- x[3];
WC1 <- x[4];
C1 <- x[5];
WF1 <- x[6];
F1 <- x[7];
R1 <- x[8];
D1 <-x[9];
# initial conditions medium
I2 <- x[10];
P2 <- x[11];
MS2 <- x[12];
WC2 <- x[13];
C2 <- x[14];
WF2 <- x[15];
F2 <- x[16];
R2 <- x[17];
D2 <-x[18];
# initial conditions old ##### CHANGE OLD PARAM
I3 <- x[19];
P3 <- x[20];
MS3 <- x[21];
WC3 <- x[22];
C3 <- x[23];
WF3 <- x[24];
F3 <- x[25];
R3 <- x[26];
D3 <-x[27];
Dead_at_ICU <- x[28];
Dead_on_Floor <- x[29];
Dead_waiting_for_ICU <- x[30];
Dead_waiting_for_Floor<- x[31];
Dead_with_mild_symptoms<- x[32];
Dead_in_ED<- x[33];
Number_seen_at_ED<- x[34];
FTotal<- x[35]
CTotal<- x[36]
##################################### initialize parameters
phi_I1=pars$phi_I1
phi1 =pars$phi1
sigma_MS1=pars$sigma_MS1
sigma_C1=pars$sigma_C1
sigma_F1=pars$sigma_F1
chi_C1=pars$chi_C1
chi_L1=pars$chi_L1
theta_F1=pars$theta_F1
eta1=pars$eta1
zeta1=pars$zeta1
xi_MS1=pars$xi_MS1
mu_I1=pars$mu_I1
mu_P1=pars$mu_P1
mu_MS1=pars$mu_MS1
mu_C1=pars$mu_C1
mu_F1=pars$mu_F1
mu_WC1=pars$mu_WC1
mu_WF1=pars$mu_WF1
lambda1=pars$lambda1
theta_WF1=pars$theta_WF1
phi_I2=pars$phi_I2
phi2 =pars$phi2
sigma_MS2=pars$sigma_MS2
sigma_C2=pars$sigma_C2
sigma_F2=pars$sigma_F2
chi_C2=pars$chi_C2
chi_L2=pars$chi_L2
theta_F2=pars$theta_F2
eta2=pars$eta2
zeta2=pars$zeta2
xi_MS2=pars$xi_MS2
mu_I2=pars$mu_I2
mu_P2=pars$mu_P2
mu_MS2=pars$mu_MS2
mu_C2=pars$mu_C2
mu_F2=pars$mu_F2
mu_WC2=pars$mu_WC2
mu_WF2=pars$mu_WF2
lambda2=pars$lambda2
theta_WF2=pars$theta_WF2
phi_I3=pars$phi_I3
phi3 =pars$phi3
sigma_MS3=pars$sigma_MS3
sigma_C3=pars$sigma_C3
sigma_F3=pars$sigma_F3
chi_C3=pars$chi_C3
chi_L3=pars$chi_L3
theta_F3=pars$theta_F3
eta3=pars$eta3
zeta3=pars$zeta3
xi_MS3=pars$xi_MS3
mu_I3=pars$mu_I3
mu_P3=pars$mu_P3
mu_MS3=pars$mu_MS3
mu_C3=pars$mu_C3
mu_F3=pars$mu_F3
mu_WC3=pars$mu_WC3
mu_WF3=pars$mu_WF3
lambda3=pars$lambda3
theta_WF3=pars$theta_WF3
M = pars$M;
L = pars$L;
young =pars$young
medium = pars$medium
old = pars$old
slope=pars$slope
#
#attach parameters into workspace
#attach(params)
######################### Equations ##############################
### YOUNG
dI1dt = 0 #- lambda1 * I1 -phi_I1 * I1 - mu_I1 * I1  #(1-alpha2)*delta*E2
dP1dt =  xi_MS1 * MS1 - (sigma_MS1 + sigma_C1 + sigma_F1 + mu_P1) *P1 +young* reports(t)# + presenting for care - lambda2 *I1 +
dMS1dt = sigma_MS1*P1 - (phi1 + mu_MS1 + xi_MS1)*MS1
dWC1dt =  - (sigma_C1 * P1 + theta_F1 * F1 + theta_WF1 * WF1 +eta1 * WC1) *(1/(1+exp(slope*(CTotal -M)))) + (sigma_C1 * P1 + theta_F1 * F1 + theta_WF1 * WF1) -  (mu_WC1)*WC1 # icu queue
dC1dt = (sigma_C1 * P1 + theta_F1 * F1 + theta_WF1 * WF1 +eta1*WC1) *(1/(1+exp(slope*(CTotal -M)))) -  (mu_C1)*C1 - chi_C1 * C1 # icu
dWF1dt = (sigma_F1 * P1 + chi_C1*C1) *(1- 1/(1+exp(slope*(FTotal -L))))  - zeta1 * WF1 *(1/(1+exp(slope*(CTotal -L)))) - (mu_WF1+ theta_WF1)*WF1 # floor queue
dF1dt = (sigma_F1 *P1 + zeta1* WF1+ chi_C1 * C1) *(1/(1+exp(slope*(FTotal -L))))  - (chi_L1 + mu_F1 + theta_F1)*F1 # floor bed
dR1dt = phi1*MS1+ chi_L1 * F1 +  phi_I1 * I1
dD1dt = mu_C1 * C1+ mu_F1 * F1 + mu_I1 * I1 + mu_MS1 *MS1 + mu_WF1 * WF1 + mu_WC1 * WC1 + mu_P1 * P1
### MEDIUM
dI2dt = 0 #- lambda2 * I2 -phi_I2 * I2 - mu_I2 * I2  #(1-alpha2)*delta*E2
dP2dt =  xi_MS2 * MS2 - (sigma_MS2 + sigma_C2 + sigma_F2 + mu_P2) *P2 + medium* reports(t)# presenting for care - lambda2 *I2 + # +
dMS2dt = sigma_MS2*P2 - (phi2 + mu_MS2 + xi_MS2)*MS2
dWC2dt =  (sigma_C2 * P2 + theta_F2 * F2 + theta_WF2 * WF2) -  (mu_WC2)*WC2- (sigma_C2 * P2 + theta_F2 * F2 + theta_WF2 * WF2 +eta2 * WC2) *(1/(1+exp(slope*(CTotal -M)))) # icu queue
dC2dt = (sigma_C2 * P2 + theta_F2 * F2 + theta_WF2 * WF2 +eta2*WC2) *(1/(1+exp(slope*(CTotal -M)))) -  (mu_C2)*C2- chi_C2 * C2 # icu
dWF2dt = (sigma_F2 * P2 + chi_C2*C2)  - (mu_WF2+ theta_WF2)*WF2   - (zeta2 * WF2 + sigma_F2 * P2 + chi_C2*C2) *(1/(1+exp(slope*(FTotal -L))))# floor queue
dF2dt = (sigma_F2 *P2 + zeta2* WF2+ chi_C2 * C2) *(1/(1+exp(slope*(FTotal -L))))  - (chi_L2 + mu_F2 + theta_F2)*F2 # floor bed
dR2dt =phi2*MS2+ chi_L2 * F2 +  phi_I2 * I2
dD2dt =mu_C2 * C2+ mu_F2 * F2 + mu_I2 * I2 + mu_MS2 *MS2+ mu_WF2 * WF2 + mu_WC2 * WC2 + mu_P2 * P2
### OLD
dI3dt = 0 #- lambda3 * I3 -phi_I3 * I3 - mu_I3 * I3  #(1-alpha2)*delta*E2
#
dP3dt =   xi_MS3 * MS3 - (sigma_MS3 + sigma_C3 + sigma_F3 + mu_P3)*P3 + old* reports(t)# presenting for care - lambda3 *I3 #
#
dMS3dt = sigma_MS3 * P3 - (phi3 + mu_MS3 + xi_MS3)*MS3
#
dWC3dt = (sigma_C3 * P3 + theta_F3 * F3 + theta_WF3 * WF3) *(1- 1/(1+exp(slope*(CTotal -M)))) -  (mu_WC3)*WC3 - eta3 * WC3 *(1/(1+exp(slope*(CTotal -M)))) # icu queue
#
dC3dt =  (sigma_C3 * P3 + theta_F3 * F3 + theta_WF3 * WF3 + eta3*WC3) *(1/(1+exp(slope*(CTotal -M)))) -  (mu_C3)*C3- chi_C3 * C3 # icu
#
dWF3dt = (sigma_F3 * P3 + chi_C3*C3) - (mu_WF3+ theta_WF3)*WF3  - (sigma_F3 * P3 + chi_C3*C3+ zeta3 * WF3) *(1/(1+exp(slope*(FTotal -L))))  # floor queue
#
dF3dt = (sigma_F3 *P3 + zeta3* WF3+ chi_C3 * C3) *(1/(1+exp(slope*(FTotal -L))))  - (chi_L3 + mu_F3 + theta_F3)*F3 # floor bed
#
dR3dt = phi3*MS3 + chi_L3 * F3 +  phi_I3 * I3
#
dD3dt = mu_C3 * C3 + mu_F3 * F3 + mu_I3 * I3 + mu_MS3 * MS3+ mu_WF3 * WF3 + mu_WC3 * WC3 + mu_P3 * P3
#
#
dFTotaldt =   (sigma_F1 *P1 + zeta1* WF1+ chi_C1 * C1 + sigma_F2 *P2 + zeta2* WF2+ chi_C2 * C2 + sigma_F3 *P3 + zeta3* WF3+ chi_C3 * C3) *(1/(1+exp(slope*(FTotal -L))))  - (chi_L1 + mu_F1 + theta_F1)*F1   - (chi_L2 + mu_F2 + theta_F2)*F2 + - (chi_L3 + mu_F3 + theta_F3)*F3 ;
dCTotaldt =  (sigma_C1 * P1 + theta_F1 * F1 + theta_WF1 * WF1 +eta1*WC1 + sigma_C2 * P2 + theta_F2 * F2 + theta_WF2 * WF2 +eta2*WC2 +sigma_C3 * P3 + theta_F3 * F3 + theta_WF3 * WF3 + eta3*WC3) *(1/(1+exp(slope*(CTotal -M)))) -  (mu_C1)*C1 - chi_C1 * C1 -  (mu_C2)*C2- chi_C2 * C2 -  (mu_C3)*C3- chi_C3 * C3;
dDead_at_ICUdt = mu_C1 * C1 + mu_C2 * C2+ mu_C3 * C3;
dDead_on_Floordt = mu_F1 * F1 + mu_F2 * F2 + mu_F3 * F3;
dDead_waiting_for_ICUdt = mu_WC1 * WC1 + mu_WC2 * WC2+ mu_WC3 * WC3;
dDead_waiting_for_Floordt =  mu_WF1 * WF1 + mu_WF2 * WF2 + mu_WF3 * WF3;
dDead_with_mild_symptomsdt = mu_MS1 *MS1+ mu_MS2 *MS2+mu_MS3 *MS3;
dDead_in_EDdt = mu_P1 * P1 + mu_P2 * P2+ mu_P3 * P3;
#
dNumber_seen_at_EDdt = reports(t)  +xi_MS1 * MS1 +xi_MS2 * MS2 +xi_MS3 * MS3 ;
###################################
# results
output <- c(dI1dt, dP1dt, dMS1dt, dWC1dt,dC1dt,dWF1dt, dF1dt, dR1dt, dD1dt,
dI2dt, dP2dt, dMS2dt, dWC2dt,dC2dt,dWF2dt, dF2dt, dR2dt, dD2dt,
dI3dt, dP3dt, dMS3dt, dWC3dt,dC3dt,dWF3dt, dF3dt, dR3dt, dD3dt,
dDead_at_ICUdt ,dDead_on_Floordt ,dDead_waiting_for_ICUdt,
dDead_waiting_for_Floordt,dDead_with_mild_symptomsdt,dDead_in_EDdt,dNumber_seen_at_EDdt, dFTotaldt, dCTotaldt)
# list it!
list(output)
}
run_model <- function(func, xstart, times, params, method = "lsodes") {
return(as.data.frame(ode(func = func, y = xstart, times = times, parms = params, method = method)))
}
test = run_model(model_strat, xstart = as.numeric(x), times = c(1:60), params, method = "lsodes")
names(test)[2:ncol(test)] = names(x)
test$reports <- reports(1:60);
return(test)
}
end_time = Sys.time()
test = hospital_queues(initial_report= 1000,
final_report = 10000,
distribution= "geometric",
young=.24,
medium=.6,
slope=50)
library(caTools)
library(cowplot)
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(latex2exp)
library(openxlsx)
library(Rcpp)
library(reshape)
library(reshape2)
library(tidyr)
library(zoo)
plot_hospital<- function(initial_report= 1000,
final_report = 10000,
distribution= "ramp",
young=.24,
medium=.6){
hospital <- hospital_queues(initial_report= 1000,
final_report = 10000,
distribution= distribution,
young=.24,
medium=.6)
hospital$totaldead<- hospital$Dead_at_ICU + hospital$Dead_in_ED + hospital$Dead_on_Floor+ hospital$Dead_waiting_for_Floor+ hospital$Dead_waiting_for_ICU+ hospital$Dead_with_mild_symptoms
hospital$totalWC<- hospital$WC1 + hospital$WC2 + hospital$WC3
hospital$totalWF<- hospital$WF1 + hospital$WF2 + hospital$WF3
hospital_melt<- hospital %>% gather(variable, value, -time);
p1 <-ggplot(hospital,
aes(x=time, y=reports))+
geom_bar(size=1.5, stat="identity")+
theme_bw(base_size=16) +
labs(x="Time (Day)", y="Patients")+
ggtitle("Initial emergency department visits")+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))      #geom_line(aes(y=avg_alpha_min, x=as.Date(time, origin = "1900-01-01")), size=1.5, color="red", linetype = "twodash")
p2 <-ggplot(hospital_melt,
aes(x=time,y=value, color=variable))+
geom_line(data= hospital_melt[hospital_melt$variable %in% c("Number_seen_at_ED", "totaldead"),],size=1.5)+
theme_bw(base_size=16) +
scale_color_manual( name="Legend", values=c("black", "red"), labels=c("Number_seen_at_ED"="ED throughput", "totaldead"="Deaths"))+
labs(x="Time (Day)", y="Patients")+
ggtitle("Emergency department cumulative triages and deaths")+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
p3 <-ggplot(hospital_melt,
aes(x=time,y=value, fill=variable))+
geom_area(data= hospital_melt[hospital_melt$variable %in% c("Dead_at_ICU", "Dead_waiting_for_ICU", "Dead_on_Floor", "Dead_waiting_for_Floor", "Dead_with_mild_symptoms", "Dead_in_ED"),],size=1.5)+
theme_bw(base_size=16)+
scale_fill_manual( name="Legend", values=ordered(c("black", "grey", "red",  "pink", "yellow", "orange")), labels=c("Dead_at_ICU"="In ICU", "Dead_waiting_for_ICU"="Waiting for ICU beds", "Dead_on_Floor"= "On floor", "Dead_waiting_for_Floor"="Waiting for floor beds", "Dead_with_mild_symptoms"="Post discharge from ED", "Dead_in_ED"="In ED"))+
labs(x="Time (Day)", y="Patients")+
ggtitle("Deaths by location")+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
p4 <-ggplot(hospital_melt,
aes(x=time,y=value, color=variable))+
geom_line(data= hospital_melt[hospital_melt$variable %in% c("CTotal", "FTotal", "totalWC", "totalWF"),],size=1.5)+
theme_bw(base_size=16) +
scale_color_manual( name="Legend", values=c("black", "red", "grey", "pink"), labels=c("CTotal"="In ICU", "FTotal"= "On floor", "totalWC" ="Waiting for ICU beds", "totalWF"="Waiting for floor beds"))+
labs(x="Time (Day)", y="Patients")+
ggtitle("ICU and floor utilization and queues")+
theme(panel.border = element_blank(), axis.line = element_line(colour = "black"))
plot_grid(p1, p2,p3,p4, nrow=2, ncol=2, labels=c('A', 'B', 'C', 'D'), align="hv")
}
plot_hospital(initial_report= 1000,
final_report = 10000,
distribution= "ramp",
young=.24,
medium=.6)
update.packages()
warnings()
updateR()
install.packages("installr")
library(installr)
updateR()
source("plot_hospital.R")
source("queueinputs.R")
source("queuemodel-3-23.R")
####################
server <- function(input, output) {
output$hospitalPlot <- renderPlot({
# put slider control values here as arguments
plots<- plot_hospital(initial_report=input$initrep,
final_report=input$finalrep,
L=input$floorcap,
M=input$icucap,
distribution=input$distrib,
t= input$time,
chi_C=1/input$avgicudischargetime,
chi_L=1/input$avgfloordischargetime,
growth_rate=log(input$growth_rate))
plot_grid(plots[[1]], plots[[2]],plots[[3]],plots[[4]], nrow=2, ncol=2, labels=c('A', 'B', 'C', 'D'), align="hv")
})
}
####################
ui <- fluidPage(
titlePanel("COVID-19 ICU dynamics"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Main", fluid=TRUE,
includeMarkdown("content/instructions.md"),
h4("Scenario:"),
sliderInput("initrep", "Initial cases per day", min=1, max=1e3, value=50),
sliderInput("finalrep", "Expected cases per day at time horizon", min=1, max=1e3, value=1000),
radioButtons("distrib",
"Infection curve",
c("Exponential"="exponential",
"Ramp"="ramp",
"Logistic"="logistic",
"Geometric"="geometric",
"Uniform"="uniform"),
inline=TRUE,
selected="exponential"),
sliderInput("growth_rate", "Growth rate (exponential)", min=1.00, max=1.1, value=1.02),
sliderInput("time", "Time Horizon",     min=30, max=120, value=60),
h4("Capacity:"),
includeMarkdown("content/capacity.md"),
sliderInput("floorcap", "Floor capacity", min=0, max=2500, value=1781),
sliderInput("icucap", "ICU capacity",     min=0, max=500, value=352)),
# put more sliderInputs here!
tabPanel("Parameters", fluid=TRUE,
includeMarkdown("content/parameters.md"),
sliderInput("avgfloordischargetime", "Average time on floor", min=0, max=25, value=7),
sliderInput("avgicudischargetime", "Average time in ICU",     min=0, max=25, value=10),
)),width=3),
mainPanel(plotOutput("hospitalPlot",height="700px"))
),
hr(),
includeMarkdown("content/footer.md")
)
shinyApp(ui = ui, server = server)
setwd("~/")
setwd("~/GitHub/covid19_icu")
devtools::load_all()
runApp()
text_hospital(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0)
test = text_hospital(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0)
text[1,"C1"]
test[1,"C1"]
test
test = hospital_queues(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0)
hospital = test
hospital[1,"C1"]
hospital[1,"C2"]
hospital[1,"C3"]
hospital[1,"C3"]
(hospital %>% select(C1, C2, C3, F1, F2, F3))[1,]
sum((hospital %>% select(C1, C2, C3, F1, F2, F3))[1,])
#' @export
text_hospital = function(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0){
hospital <- hospital_queues(initial_report=initial_report,
final_report = final_report,
distribution= distribution,
young=young,
medium=medium,
M=M,
L=L,
t=t,
chi_C=chi_C,
chi_L=chi_L,
growth_rate=growth_rate,
mu_C1 = mu_C1,
mu_C2 = mu_C2,
mu_C3 = mu_C3,
rampslope=rampslope,
Cinit = Cinit,
Finit = Finit,
Lfinal=Lfinal,
Lramp=Lramp,
Mfinal=Mfinal,
Mramp=Mramp,
doprotocols=doprotocols)
hospital$totaldead<- hospital$Dead_at_ICU + hospital$Dead_in_ED + hospital$Dead_on_Floor+ hospital$Dead_waiting_for_Floor+ hospital$Dead_waiting_for_ICU+ hospital$Dead_with_mild_symptoms
hospital$totalWC<- hospital$WC1 + hospital$WC2 + hospital$WC3
hospital$totalWF<- hospital$WF1 + hospital$WF2 + hospital$WF3
#ICU queue
ICUover = (hospital$WC1+hospital$WC2+hospital$WC3>=1)
#floor queue
floorover = (hospital$WF1+hospital$WF2+hospital$WF3>=1)
#day that you run out of beds
if(sum(floorover)>0){
floorover<- min(which(floorover))
} else{floorover = "No shortage"}
if(sum(ICUover)>0){
ICUover<- min(which(ICUover))
} else{ICUover = "No shortage"}
#max number that are in the queue at any given time
ICU_WC = max(hospital$totalWC)
floor_WF = max(hospital$totalWF)
#initial number of patients in the ICU and on the floor
pt_init = sum((hospital %>% select(C1, C2, C3, F1, F2, F3))[1,])
text = data.frame(Variable = c("Total ED visits",
"Total deaths",
"Case fatality ratio",
"Deaths in the ICU",
"Deaths on the floor",
"Deaths waiting for ICU beds",
"Deaths waiting for floor beds",
"Days to floor overflow",
"Days to ICU overflow",
"Floor beds needed",
"ICU beds needed"),
Value = c(ceiling(tail(hospital$Number_seen_at_ED, n=1)),
ceiling(tail(hospital$totaldead, n=1)),
paste(signif(tail(hospital$totaldead, n=1)/(pt_init + tail(hospital$Number_seen_at_ED, n=1)), digits=3)*100, "%"),
ceiling(tail(hospital$Dead_at_ICU, n=1)),
ceiling(tail(hospital$Dead_on_Floor, n=1)),
ceiling(tail(hospital$Dead_waiting_for_ICU,n=1)),
ceiling(tail(hospital$Dead_waiting_for_Floor, n=1)),
floorover,
ICUover,
format(ceiling(floor_WF), scientific=FALSE),
format(ceiling(ICU_WC), scientific = FALSE)))
}
runApp()
