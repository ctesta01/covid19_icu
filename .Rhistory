chi_L=chi_L,
growth_rate=growth_rate,
mu_C1 = mu_C1,
mu_C2 = mu_C2,
mu_C3 = mu_C3,
rampslope=rampslope,
Cinit = Cinit,
Finit = Finit,
Lfinal=Lfinal,
Lramp=Lramp,
Mfinal=Mfinal,
Mramp=Mramp,
doprotocols=doprotocols)
hospital$totaldead<- hospital$Dead_at_ICU + hospital$Dead_in_ED + hospital$Dead_on_Floor+ hospital$Dead_waiting_for_Floor+ hospital$Dead_waiting_for_ICU+ hospital$Dead_with_mild_symptoms
hospital$totalWC<- hospital$WC1 + hospital$WC2 + hospital$WC3
hospital$totalWF<- hospital$WF1 + hospital$WF2 + hospital$WF3
#ICU queue
ICUover = (hospital$WC1+hospital$WC2+hospital$WC3>=1)
#floor queue
floorover = (hospital$WF1+hospital$WF2+hospital$WF3>=1)
#day that you run out of beds
if(sum(floorover)>0){
floorover<- min(which(floorover))
} else{floorover = "No shortage"}
if(sum(ICUover)>0){
ICUover<- min(which(ICUover))
} else{ICUover = "No shortage"}
#max number that are in the queue at any given time
ICU_WC = max(hospital$totalWC)
floor_WF = max(hospital$totalWF)
text = data.frame(Variable = c("Total ED visits",
"Days to floor overflow",
"Days to ICU overflow",
"Floor beds needed",
"ICU beds needed"),
Value = c(sum(hospital$P1 + hospital$P2 + hospital$P3),
floorover,
ICUover,
format(ceiling(floor_WF), scientific=FALSE),
format(ceiling(ICU_WC), scientific = FALSE)))
}
runApp()
#' @export
text_hospital = function(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0){
hospital <- hospital_queues(initial_report=initial_report,
final_report = final_report,
distribution= distribution,
young=young,
medium=medium,
M=M,
L=L,
t=t,
chi_C=chi_C,
chi_L=chi_L,
growth_rate=growth_rate,
mu_C1 = mu_C1,
mu_C2 = mu_C2,
mu_C3 = mu_C3,
rampslope=rampslope,
Cinit = Cinit,
Finit = Finit,
Lfinal=Lfinal,
Lramp=Lramp,
Mfinal=Mfinal,
Mramp=Mramp,
doprotocols=doprotocols)
hospital$totaldead<- hospital$Dead_at_ICU + hospital$Dead_in_ED + hospital$Dead_on_Floor+ hospital$Dead_waiting_for_Floor+ hospital$Dead_waiting_for_ICU+ hospital$Dead_with_mild_symptoms
hospital$totalWC<- hospital$WC1 + hospital$WC2 + hospital$WC3
hospital$totalWF<- hospital$WF1 + hospital$WF2 + hospital$WF3
#ICU queue
ICUover = (hospital$WC1+hospital$WC2+hospital$WC3>=1)
#floor queue
floorover = (hospital$WF1+hospital$WF2+hospital$WF3>=1)
#day that you run out of beds
if(sum(floorover)>0){
floorover<- min(which(floorover))
} else{floorover = "No shortage"}
if(sum(ICUover)>0){
ICUover<- min(which(ICUover))
} else{ICUover = "No shortage"}
#max number that are in the queue at any given time
ICU_WC = max(hospital$totalWC)
floor_WF = max(hospital$totalWF)
text = data.frame(Variable = c("Total ED visits",
"Total deaths",
"Deaths in the ICU",
"Deaths on the floor",
"Deaths waiting for ICU beds",
"Deaths waiting for floor beds",
"Days to floor overflow",
"Days to ICU overflow",
"Floor beds needed",
"ICU beds needed"),
Value = c(ceiling(sum(hospital$P1 + hospital$P2 + hospital$P3)),
hospital$totaldead,
hospital$Dead_at_ICU,
hospital$Dead_on_Floor,
hospital$Dead_waiting_for_ICU,
hospital$Dead_waiting_for_Floor,
floorover,
ICUover,
format(ceiling(floor_WF), scientific=FALSE),
format(ceiling(ICU_WC), scientific = FALSE)))
}
runApp()
#' @export
text_hospital = function(initial_report= 1000,
final_report = 10000,
distribution= "exponential",
young=.24,
medium=.6,
M=352,
L=1781,
t = 60,
chi_C=0.1,
chi_L=.142857,
growth_rate=1,
mu_C1 = .1,
mu_C2 = .1,
mu_C3 = .1,
rampslope=1.2,
Cinit = .25,
Finit = .5,
Lfinal=1781,
Lramp=c(0,0),
Mfinal=352,
Mramp=c(0,0),
doprotocols=0){
hospital <- hospital_queues(initial_report=initial_report,
final_report = final_report,
distribution= distribution,
young=young,
medium=medium,
M=M,
L=L,
t=t,
chi_C=chi_C,
chi_L=chi_L,
growth_rate=growth_rate,
mu_C1 = mu_C1,
mu_C2 = mu_C2,
mu_C3 = mu_C3,
rampslope=rampslope,
Cinit = Cinit,
Finit = Finit,
Lfinal=Lfinal,
Lramp=Lramp,
Mfinal=Mfinal,
Mramp=Mramp,
doprotocols=doprotocols)
hospital$totaldead<- hospital$Dead_at_ICU + hospital$Dead_in_ED + hospital$Dead_on_Floor+ hospital$Dead_waiting_for_Floor+ hospital$Dead_waiting_for_ICU+ hospital$Dead_with_mild_symptoms
hospital$totalWC<- hospital$WC1 + hospital$WC2 + hospital$WC3
hospital$totalWF<- hospital$WF1 + hospital$WF2 + hospital$WF3
#ICU queue
ICUover = (hospital$WC1+hospital$WC2+hospital$WC3>=1)
#floor queue
floorover = (hospital$WF1+hospital$WF2+hospital$WF3>=1)
#day that you run out of beds
if(sum(floorover)>0){
floorover<- min(which(floorover))
} else{floorover = "No shortage"}
if(sum(ICUover)>0){
ICUover<- min(which(ICUover))
} else{ICUover = "No shortage"}
#max number that are in the queue at any given time
ICU_WC = max(hospital$totalWC)
floor_WF = max(hospital$totalWF)
text = data.frame(Variable = c("Total ED visits",
"Total deaths",
"Deaths in the ICU",
"Deaths on the floor",
"Deaths waiting for ICU beds",
"Deaths waiting for floor beds",
"Days to floor overflow",
"Days to ICU overflow",
"Floor beds needed",
"ICU beds needed"),
Value = c(ceiling(sum(hospital$P1 + hospital$P2 + hospital$P3)),
ceiling(sum(hospital$totaldead)),
ceiling(sum(hospital$Dead_at_ICU)),
ceiling(sum(hospital$Dead_on_Floor)),
ceiling(sum(hospital$Dead_waiting_for_ICU)),
ceiling(sum(hospital$Dead_waiting_for_Floor)),
floorover,
ICUover,
format(ceiling(floor_WF), scientific=FALSE),
format(ceiling(ICU_WC), scientific = FALSE)))
}
runApp()
runApp()
####################
server <- function(input, output, session) {
observe({
updateSliderInput(session, "floorcapramp", max=input$time)
updateSliderInput(session, "icucapramp", max=input$time)
if(input$floorcaptarget < input$floorcap) {
updateSliderInput(session, "floorcaptarget", value=input$floorcap)
}
if (input$icucaptarget < input$icucap) {
updateSliderInput(session, "icucaptarget", value=input$icucap)
}
})
output$hospitalPlot <- renderPlot({
# put slider control values here as arguments
plots<- plot_hospital(initial_report=input$initrep,
final_report=input$finalrep,
L=input$floorcap,
M=input$icucap,
distribution=input$distrib,
t= input$time,
chi_C=1/input$avgicudischargetime,
chi_L=1/input$avgfloordischargetime,
growth_rate=log(2)/(input$doubling_time),
mu_C1 = input$ICUdeath_young,
mu_C2 = input$ICUdeath_medium,
mu_C3 = input$ICUdeath_old,
rampslope = input$rampslope,
Cinit = input$Cinit,
Finit = input$Finit,
Lfinal=input$floorcaptarget,
Lramp=input$floorcapramp,
Mfinal=input$icucaptarget,
Mramp=input$icucapramp,
doprotocols=input$doprotocols
)
plot_grid(plots[[1]], plots[[2]],plots[[3]],plots[[4]], nrow=2, ncol=2, labels=c('A', 'B', 'C', 'D'), align="hv")
})
output$hospitalTable <- renderTable({
text = text_hospital(initial_report=input$initrep,
final_report=input$finalrep,
L=input$floorcap,
M=input$icucap,
distribution=input$distrib,
t= input$time,
chi_C=1/input$avgicudischargetime,
chi_L=1/input$avgfloordischargetime,
growth_rate=log(2)/(input$doubling_time),
mu_C1 = input$ICUdeath_young,
mu_C2 = input$ICUdeath_medium,
mu_C3 = input$ICUdeath_old,
rampslope = input$rampslope,
Cinit = input$Cinit,
Finit = input$Finit,
Lfinal=input$floorcaptarget,
Lramp=input$floorcapramp,
Mfinal=input$icucaptarget,
Mramp=input$icucapramp,
doprotocols=input$doprotocols)
})
}
####################
generate_ui <- function() {
fluidPage(theme=shinytheme("simplex"),
titlePanel("COVID-19 Hospital Capacity Model"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Scenario", fluid=TRUE,
includeMarkdown(system.file("content/instructions.md", package='covid19icu')),
h4("Scenario:"),
sliderInput("time", "Time Horizon (days)",     min=1, max=60, value=30),
radioButtons("distrib",                     "Infection curve",
c("Exponential"="exponential",
"Linear"="ramp",
"Saturated"="logistic",
"Flat"="uniform"),
inline=TRUE,
selected="exponential"),
sliderInput("initrep", "Initial cases per day", min=1, max=1e3, value=50),
conditionalPanel(
condition = "input.distrib=='geometric'||input.distrib=='logistic'",
sliderInput("finalrep", "Peak number of cases", min=1, max=3000, value=1000)
),
conditionalPanel(
condition = "input.distrib=='ramp'",
sliderInput("rampslope", "Rate of increase in new cases per day", min=0, max=5, value=1.2, step = .1)
),
conditionalPanel(
condition = "input.distrib == 'exponential'",
sliderInput("doubling_time", "Doubling time (days)", min=2, max=28, value=14)
),
),
tabPanel("Capacity", fluid=TRUE,
includeMarkdown(system.file("content/capacity.md", package='covid19icu')),
sliderInput("icucap", "ICU capacity",     min=0, max=3000, value=90),
sliderInput("floorcap", "Initial floor capacity", min=0, max=15000, value=100),
sliderInput("Cinit", "% of ICU capacity occupied at time 0",     min=0, max=100, value=44),
sliderInput("Finit", "% of floor capacity occupied at time 0",     min=0, max=100, value=56)),
tabPanel("Strategy", fluid=TRUE,
includeMarkdown(system.file("content/protocols.md", package='covid19icu')),
radioButtons("doprotocols", "Capacity expansion strategy",
c("Off"=0, "On"=1),
inline=TRUE,
selected=0),
conditionalPanel(
condition = "input.doprotocols==1",
sliderInput("icucaptarget",  "Target ICU capacity", min=0, max=3000, value=50),
sliderInput("icucapramp",  "ICU capacity scale-up (days)", min=0, max=30, value=c(10,20)),
sliderInput("floorcaptarget",  "Target floor capacity", min=0, max=15000, value=100),
sliderInput("floorcapramp",  "Floor capacity scale-up (days)", min=0, max=30, value=c(10,20))
)),
tabPanel("Parameters", fluid=TRUE,
includeMarkdown(system.file("content/parameters.md", package='covid19icu')),
sliderInput("avgfloordischargetime", "Average time on floor", min=0, max=25, value=7),
sliderInput("avgicudischargetime", "Average time in ICU",     min=0, max=25, value=10),
sliderInput("ICUdeath_young", "Death rate in ICU (<18 years)",     min=0, max=1, value=.1),
sliderInput("ICUdeath_medium", "Death rate in ICU (18-64 years)",     min=0, max=1, value=.1),
sliderInput("ICUdeath_old", "Death rate in ICU (65+ years)",     min=0, max=1, value=.1),
)),width=4),
mainPanel(
tabsetPanel(
tabPanel("Plots", fluid=TRUE,
plotOutput("hospitalPlot",height="700px")
),
tabPanel("Summary", fluid=TRUE,
includeMarkdown(system.file("content/summary.md", package='covid19icu')),
h3("Outputs"),
tableOutput("hospitalTable")
),
tabPanel("Inputs", fluid=TRUE,
includeMarkdown(system.file("content/inputs.md", package='covid19icu'))
),
tabPanel("Outputs", fluid=TRUE,
includeMarkdown(system.file("content/outputs.md", package='covid19icu'))
),
tabPanel("About", fluid=TRUE,
includeMarkdown(system.file("content/queue_graphic.md", package='covid19icu'))
)
)
)),
hr(),
includeMarkdown(system.file("content/footer.md", package='covid19icu'))
)
}
#' @export
runApp <- function() {
shinyApp(ui = generate_ui(), server = server)
}
runApp()
runApp()
####################
server <- function(input, output, session) {
observe({
updateSliderInput(session, "floorcapramp", max=input$time)
updateSliderInput(session, "icucapramp", max=input$time)
if(input$floorcaptarget < input$floorcap) {
updateSliderInput(session, "floorcaptarget", value=input$floorcap)
}
if (input$icucaptarget < input$icucap) {
updateSliderInput(session, "icucaptarget", value=input$icucap)
}
})
output$hospitalPlot <- renderPlot({
# put slider control values here as arguments
plots<- plot_hospital(initial_report=input$initrep,
final_report=input$finalrep,
L=input$floorcap,
M=input$icucap,
distribution=input$distrib,
t= input$time,
chi_C=1/input$avgicudischargetime,
chi_L=1/input$avgfloordischargetime,
growth_rate=log(2)/(input$doubling_time),
mu_C1 = input$ICUdeath_young,
mu_C2 = input$ICUdeath_medium,
mu_C3 = input$ICUdeath_old,
rampslope = input$rampslope,
Cinit = input$Cinit,
Finit = input$Finit,
Lfinal=input$floorcaptarget,
Lramp=input$floorcapramp,
Mfinal=input$icucaptarget,
Mramp=input$icucapramp,
doprotocols=input$doprotocols
)
plot_grid(plots[[1]], plots[[2]],plots[[3]],plots[[4]], nrow=2, ncol=2, labels=c('A', 'B', 'C', 'D'), align="hv")
})
output$hospitalTable <- renderTable({
text = text_hospital(initial_report=input$initrep,
final_report=input$finalrep,
L=input$floorcap,
M=input$icucap,
distribution=input$distrib,
t= input$time,
chi_C=1/input$avgicudischargetime,
chi_L=1/input$avgfloordischargetime,
growth_rate=log(2)/(input$doubling_time),
mu_C1 = input$ICUdeath_young,
mu_C2 = input$ICUdeath_medium,
mu_C3 = input$ICUdeath_old,
rampslope = input$rampslope,
Cinit = input$Cinit,
Finit = input$Finit,
Lfinal=input$floorcaptarget,
Lramp=input$floorcapramp,
Mfinal=input$icucaptarget,
Mramp=input$icucapramp,
doprotocols=input$doprotocols)
})
}
####################
generate_ui <- function() {
fluidPage(theme=shinytheme("simplex"),
titlePanel("COVID-19 Hospital Capacity Model"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Scenario", fluid=TRUE,
includeMarkdown(system.file("content/instructions.md", package='covid19icu')),
h4("Scenario:"),
sliderInput("time", "Time Horizon (days)",     min=1, max=60, value=30),
radioButtons("distrib",                     "Infection curve",
c("Exponential"="exponential",
"Linear"="ramp",
"Saturated"="logistic",
"Flat"="uniform"),
inline=TRUE,
selected="exponential"),
sliderInput("initrep", "Initial cases per day", min=1, max=1e3, value=50),
conditionalPanel(
condition = "input.distrib=='geometric'||input.distrib=='logistic'",
sliderInput("finalrep", "Peak number of cases", min=1, max=3000, value=1000)
),
conditionalPanel(
condition = "input.distrib=='ramp'",
sliderInput("rampslope", "Rate of increase in new cases per day", min=0, max=5, value=1.2, step = .1)
),
conditionalPanel(
condition = "input.distrib == 'exponential'",
sliderInput("doubling_time", "Doubling time (days)", min=2, max=28, value=14)
),
),
tabPanel("Capacity", fluid=TRUE,
includeMarkdown(system.file("content/capacity.md", package='covid19icu')),
sliderInput("icucap", "ICU capacity",     min=0, max=3000, value=90),
sliderInput("floorcap", "Initial floor capacity", min=0, max=15000, value=100),
sliderInput("Cinit", "% of ICU capacity occupied at time 0",     min=0, max=100, value=44),
sliderInput("Finit", "% of floor capacity occupied at time 0",     min=0, max=100, value=56)),
tabPanel("Strategy", fluid=TRUE,
includeMarkdown(system.file("content/protocols.md", package='covid19icu')),
radioButtons("doprotocols", "Capacity expansion strategy",
c("Off"=0, "On"=1),
inline=TRUE,
selected=0),
conditionalPanel(
condition = "input.doprotocols==1",
sliderInput("icucaptarget",  "Target ICU capacity", min=0, max=3000, value=50),
sliderInput("icucapramp",  "ICU capacity scale-up (days)", min=0, max=30, value=c(10,20)),
sliderInput("floorcaptarget",  "Target floor capacity", min=0, max=15000, value=100),
sliderInput("floorcapramp",  "Floor capacity scale-up (days)", min=0, max=30, value=c(10,20))
)),
tabPanel("Parameters", fluid=TRUE,
includeMarkdown(system.file("content/parameters.md", package='covid19icu')),
sliderInput("avgfloordischargetime", "Average time on floor", min=0, max=25, value=7),
sliderInput("avgicudischargetime", "Average time in ICU",     min=0, max=25, value=10),
sliderInput("ICUdeath_young", "Death rate in ICU (<18 years)",     min=0, max=1, value=.1),
sliderInput("ICUdeath_medium", "Death rate in ICU (18-64 years)",     min=0, max=1, value=.1),
sliderInput("ICUdeath_old", "Death rate in ICU (65+ years)",     min=0, max=1, value=.1),
)),width=4),
mainPanel(
tabsetPanel(
tabPanel("Plots", fluid=TRUE,
plotOutput("hospitalPlot",height="700px")
),
tabPanel("Summary", fluid=TRUE,
includeMarkdown(system.file("content/summary.md", package='covid19icu')),
tableOutput("hospitalTable")
),
tabPanel("Inputs", fluid=TRUE,
includeMarkdown(system.file("content/inputs.md", package='covid19icu'))
),
tabPanel("Outputs", fluid=TRUE,
includeMarkdown(system.file("content/outputs.md", package='covid19icu'))
),
tabPanel("About", fluid=TRUE,
includeMarkdown(system.file("content/queue_graphic.md", package='covid19icu'))
)
)
)),
hr(),
includeMarkdown(system.file("content/footer.md", package='covid19icu'))
)
}
#' @export
runApp <- function() {
shinyApp(ui = generate_ui(), server = server)
}
runApp()
runApp()
runApp()
runApp()
